#!/usr/bin/env bash
# Script to install dotfiles
# Author: IR-MB
# URL: https://github.com/Irmb7108/dotfiles

# Colors
CRE=$(tput setaf 1)
CYE=$(tput setaf 3)
CGR=$(tput setaf 2)
CBL=$(tput setaf 4)
BLD=$(tput bold)
CNC=$(tput sgr0)

# Paths
BACKUP_FOLDER="$HOME/.RiceBackup"
DATE=$(date +%Y%m%d-%H%M%S)
LOG_FILE="$HOME/dotfiles_install.log"

# Function to log messages
log() {
    echo "$(date): $1" | tee -a "$LOG_FILE"
}

# Function to display logo
logo() {
    local text="${1:?}"
    echo -e "\n\n\033[38;5;70m\033[1;31m\033[3m\
        \033[1;32m
            ██╗██████╗       ███╗   ███╗██████╗
            ██║██╔══██╗      ████╗ ████║██╔══██╗
            ██║██████╔╝█████╗██╔████╔██║██████╔╝
            ██║██╔══██╗╚════╝██║╚██╔╝██║██╔══██╗
            ██║██║  ██║      ██║ ╚═╝ ██║██████╔╝
            ╚═╝╚═╝  ╚═╝      ╚═╝     ╚═╝╚═════╝
          \033[0m               Author: IR-MB
                   https://github.com/Irmb7108/dotfiles\n\n"
    echo -e "\033[1;32m${text}\033[0m"
}

# Check if running as root
if [ "$(id -u)" = 0 ]; then
    log "Error: This script MUST NOT be run as root user."
    exit 1
fi

# Welcome message
logo "Welcome!"
printf '\e[31mThis script installs dependencies, clones dotfiles, backs up existing configs, and copies new files. It does not modify system configurations. Root password may be required for dependencies or shell change.\n\n\e[0m'
while true; do
    read -rp "Do you wish to continue? [y/N]: " yn
    case $yn in
        [Yy]* ) break ;;
        [Nn]* ) exit ;;
        * ) printf "Error: just write 'y' or 'n'\n\n" ;;
    esac
done
clear

# Update system
logo "Update System Package"
sudo pacman -Syyu --noconfirm || { log "Error: System update failed"; exit 1; }

# List of packages
# logo "Installing needed packages..."
packages=(
    base-devel git go yay firefox zsh neovim brave-bin psmisc bat man
    cherry-kde-git kvantum-theme-cherry-git kvantum starship mullvad-vpn-bin
    lolcat tmux thinlinc remmina htop wezterm exa gimp key-mon fzf viewnior
    kitty haruna konsole alacritty rofi fish visual-studio-code-bin nekoray-bin
    harmonoid-bin tilix spicetify-cli-git spotify tabby-bin discord telegram-desktop
    gedit vlc figlet ipython feh geany jgmenu redshift simplescreenrecorder flameshot
    audacious mpd ncmpcpp atril engrampa pluma rhythmbox freetube-bin tty-clock
)

# # Install git if not present
# if ! command -v git &> /dev/null; then
#     log "Installing git..."
#     sudo pacman -S --noconfirm git || { log "Error: Failed to install git"; exit 1; }
#     log "git installed successfully."
# fi

# Install yay if not present
if ! command -v yay &> /dev/null; then
    log "Installing yay..."
    cd /tmp
    git clone https://aur.archlinux.org/yay-bin.git || { log "Error: Failed to clone yay"; exit 1; }
    cd yay-bin
    makepkg -si --noconfirm || { log "Error: Failed to install yay"; exit 1; }
    cd
    rm -rf /tmp/yay-bin
    log "yay installed successfully."
fi

# Install packages
for package in "${packages[@]}"; do
    if ! pacman -Qq "$package" &> /dev/null; then
        log "Installing package: $package"
        yay -S --noconfirm "$package" || log "Warning: Failed to install $package"
    else
        log "Package $package is already installed"
    fi
done

# Prepare XDG user directories
logo "Preparing Folders"
if [ ! -e "$HOME/.config/user-dirs.dirs" ]; then
    xdg-user-dirs-update
    log "Created xdg-user-dirs"
else
    log "user-dirs.dirs already exists"
fi

# Clone dotfiles
logo "Downloading dotfiles"
[ -d ~/dotfiles ] && rm -rf ~/dotfiles
log "Cloning dotfiles from https://github.com/Irmb7108/dotfiles"
cd || exit 1
git clone --depth=1 https://github.com/Irmb7108/dotfiles || { log "Error: Failed to clone dotfiles"; exit 1; }

# Install fonts
logo "Downloading font"
if [ ! -d ~/.local/share/fonts ]; then
mkdir -p ~/.local/share/fonts
fi
if [ ! -d ~/SFMono-Nerd-Font-Ligaturized ]; then
    git clone https://github.com/shaunsingh/SFMono-Nerd-Font-Ligaturized.git ~/SFMono-Nerd-Font-Ligaturized || { log "Error: Failed to clone font repository"; exit 1; }
fi
find ~/SFMono-Nerd-Font-Ligaturized -name "*.ttf" -exec cp {} ~/.local/share/fonts/ \; || log "Warning: Failed to copy some fonts"
rm -rf ~/SFMono-Nerd-Font-Ligaturized
fc-cache -f >/dev/null 2>&1 || log "Warning: Failed to update font cache"

# Backup existing configs
logo "Backup files"
log "Backup files will be stored in $BACKUP_FOLDER"
mkdir -p "$BACKUP_FOLDER" || { log "Error: Failed to create $BACKUP_FOLDER"; exit 1; }

config_folders=(bspwm alacritty picom rofi eww sxhkd dunst polybar ncmpcpp nvim ranger zsh mpd paru)
firefox_folder="chrome"

for folder in "${config_folders[@]}"; do
    if [ -d "$HOME/.config/$folder" ]; then
        mv "$HOME/.config/$folder" "$BACKUP_FOLDER/${folder}_$DATE" && log "$folder backed up successfully at $BACKUP_FOLDER/${folder}_$DATE" || log "Error: Failed to back up $folder"
    else
        log "The folder $folder does not exist in $HOME/.config/"
    fi
done

if compgen -G "$HOME/.mozilla/firefox/*.default-release/$firefox_folder" > /dev/null; then
    mv "$HOME/.mozilla/firefox/*.default-release/$firefox_folder" "$BACKUP_FOLDER/${firefox_folder}_$DATE" && log "$firefox_folder backed up successfully at $BACKUP_FOLDER/${firefox_folder}_$DATE" || log "Error: Failed to back up $firefox_folder"
else
    log "The folder $firefox_folder does not exist in $HOME/.mozilla/firefox/"
fi

[ -f "$HOME/.zshrc" ] && mv "$HOME/.zshrc" "$BACKUP_FOLDER/.zshrc-backup-$DATE" && log ".zshrc backed up successfully" || log "Error: Failed to back up .zshrc"

# Copy dotfiles
logo "Installing dotfiles..."
mkdir -p ~/.config ~/.local/bin ~/.local/share/applications ~/.local/share/fonts ~/.local/share/asciiart

for dir in ~/dotfiles/config/*; do
    cp -R "$dir" ~/.config/ && log "$(basename "$dir") copied successfully" || { log "Error: Failed to copy $(basename "$dir")"; exit 1; }
done

for file in ~/dotfiles/misc/bin/*; do
    cp -R "$file" ~/.local/bin/ && log "$(basename "$file") copied successfully" || log "Warning: Failed to copy $(basename "$file")"
done

for file in ~/dotfiles/misc/Pictures/*; do
    cp -R "$file" "$HOME/Pictures/" && log "$(basename "$file") copied successfully" || log "Warning: Failed to copy $(basename "$file")"
done

for file in ~/dotfiles/misc/asciiart/*; do
    cp -R "$file" ~/.local/share/asciiart/ && log "$(basename "$file") copied successfully" || log "Warning: Failed to copy $(basename "$file")"
done

for file in ~/dotfiles/misc/firefox/*; do
    cp -R "$file" ~/.mozilla/firefox/*.default-release/ && log "$(basename "$file") copied successfully" || log "Warning: Failed to copy $(basename "$file")"
done

# Copy Vim and Tmux configs
logo "Copy Vim and Tmux Config"
cp -f ~/dotfiles/home/.vimrc "$HOME" && log ".vimrc copied successfully" || log "Error: Failed to copy .vimrc"
[ ! -d "$HOME/.vim_runtime" ] && cp -R ~/dotfiles/home/.vim_runtime "$HOME" && log ".vim_runtime copied successfully" || log "Error: Failed to copy .vim_runtime"
mv ~/dotfiles/home/tmux.conf ~/dotfiles/home/.tmux.conf 2>/dev/null && cp -f ~/dotfiles/home/.tmux.conf "$HOME" && log ".tmux.conf copied successfully" || log "Error: Failed to copy .tmux.conf"

# Install LunarVim
logo "Cloning LunarVim..."
rm -rf ~/.config/nvim
git clone https://github.com/LunarVim/LunarVim.git ~/.config/nvim && log "LunarVim cloned successfully" || { log "Error: Failed to clone LunarVim"; exit 1; }
wget -P ~/.config/nvim/lua/lvim/core/alpha/ https://raw.githubusercontent.com/Irmb7108/lunarvim-custum/main/dashboard.lua && log "dashboard.lua downloaded" || log "Warning: Failed to download dashboard.lua"
wget -O ~/.config/nvim/config.lua https://raw.githubusercontent.com/Irmb7108/lunarvim-custum/main/config.lua && log "config.lua downloaded" || log "Warning: Failed to download config.lua"
# Install Paru and Eww
logo "Installing Paru & Eww"
if ! command -v paru &> /dev/null; then
    log "Installing paru..."
    cd /tmp
    git clone https://aur.archlinux.org/paru-bin.git && cd paru-bin && makepkg -si --noconfirm && cd && rm -rf /tmp/paru-bin && log "paru installed successfully" || { log "Error: Failed to install paru"; exit 1; }
else
    log "Paru is already installed"
fi

if ! command -v eww &> /dev/null; then
    log "Installing Eww..."
    paru -S eww --skipreview --noconfirm && log "Eww installed successfully" || { log "Error: Failed to install Eww"; exit 1; }
else
    log "Eww is already installed"
fi

# Enable MPD service
logo "Enabling MPD service"
systemctl --user enable mpd.service && systemctl --user start mpd.service && log "MPD service enabled and started" || log "Error: Failed to enable/start MPD service"

# Change shell to fish
logo "Changing default shell to fish"
if [ "$SHELL" != "/usr/bin/fish" ]; then
    if command -v fish &> /dev/null; then
        chsh -s /usr/bin/fish && log "Default shell changed to fish" || { log "Error: Failed to change shell to fish"; exit 1; }
    else
        log "Error: fish is not installed"
        exit 1
    fi
else
    log "Default shell is already fish"
fi

log "Installation completed successfully!"
printf "%s%sAll done! Please reboot your system.%s\n" "${BLD}" "${CGR}" "${CNC}"
